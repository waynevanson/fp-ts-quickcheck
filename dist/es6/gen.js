/**
 * @description
 * When researching how to create this library, there's definitely a lack of documentation on how the internals work.
 *
 * So a generator `Gen<A>` can functionally generate a value of `A`, given a `seed` and a `size`.
 * Some generators don't need these values, but `seed` is the most commonly used one.
 *
 * We use the `State` monad because it gives us a level of determinism that allows troubleshooting and shrinking of values.
 *
 * All values must be possibly generated by numbers, so we can use the seed or size parameters from the state.
 */
import * as lcg from "@no-day/fp-ts-lcg";
import { number as NUM, ord as ORD, readonlyArray as A, state as S, chain as CHF, } from "fp-ts";
import { flow, pipe } from "fp-ts/lib/function";
import * as lens from "monocle-ts/Lens";
/**
 * @category Model
 */
export const URI = "Gen";
// PIPEABLES
export const of = S.of;
export const map = S.map;
export const ap = S.ap;
export const chain = S.chain;
// INSTANCES
/*
 * @category Instances
 */
export const Pointed = { URI, of };
/*
 * @category Instances
 */
export const Functor = { URI, map: (fa, f) => map(f)(fa) };
/*
 * @category Instances
 */
export const Apply = Object.assign(Object.assign({}, Functor), { ap: (fab, fa) => ap(fa)(fab) });
/*
 * @category Instances
 */
export const Chain = Object.assign(Object.assign({}, Apply), { chain: (fa, f) => chain(f)(fa) });
export const chainFirst = CHF.chainFirst(Chain);
export const bind = CHF.bind(Chain);
export const Do = of({});
// CONSTRUCTORS
/**
 * @summary
 * State's `get` constructor but with `GenState` type applied.
 *
 * @category Constructors
 */
const stated = S.get();
/**
 * @category Constructors
 */
export const next = S.modify(pipe(lens.id(), lens.prop("seed"), lens.modify(lcg.lcgNext)));
/**
 * @category Constructors
 */
export const uniform = pipe(next, S.chain(() => seeded));
/**
 * @summary
 * Modifies the seed using an LCG perturber.
 *
 * @category Constructors
 */
export function perturb(perturber) {
    return S.modify(pipe(lens.id(), lens.prop("seed"), lens.modify(lcg.lcgPertub(perturber))));
}
/**
 * @summary
 *
 * @category Constructors
 */
export function repeatable(kleisli) {
    return pipe(stated, S.map((state) => flow(kleisli, S.evaluate(state))), S.chainFirst(() => next));
}
/**
 * @summary
 * Change the seed to a specific value, useful for shrinking and other
 * deterministic operations.
 *
 * @category Constructors
 */
export function variant(seed) {
    return S.modify(pipe(lens.id(), lens.prop("seed"), lens.modify(() => lcg.mkSeed(seed))));
}
/**
 * @summary
 * Get the size of the current generator.
 *
 * @category Constructors
 */
export const sized = S.gets((state) => state.size);
/**
 * @summary
 * Retrieves the current `Seed` from the state, coerced to a number.
 * Useful when using the seed to generate values
 *
 * @category Constructors
 */
export const seeded = S.gets((state) => lcg.unSeed(state.seed));
/**
 * @summary
 * Select a randomly uniform integer betwee `min` and `max`. Also takes a bounded instance.
 *
 * @category Constructors
 * @todo **note**: Normalize the value to a 32 bit integer.
 */
export function chooseInt(min, max) {
    return pipe(uniform, S.map(ORD.clamp(NUM.Ord)(min, max)));
}
// COMBINATORS
/**
 * @summary
 * From a `ReadonlyNonEmptyArray` of `Gen<A>`'s, randomly pick a generator.
 *
 * @category Combinators
 */
export function oneOf(gens) {
    return pipe(chooseInt(0, A.size(gens) - 1), 
    // index is always in range
    S.chain((index) => gens[index]));
}
