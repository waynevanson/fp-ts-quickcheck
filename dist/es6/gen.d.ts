/**
 * @description
 * When researching how to create this library, there's definitely a lack of documentation on how the internals work.
 *
 * So a generator `Gen<A>` can functionally generate a value of `A`, given a `seed` and a `size`.
 * Some generators don't need these values, but `seed` is the most commonly used one.
 *
 * We use the `State` monad because it gives us a level of determinism that allows troubleshooting and shrinking of values.
 *
 * All values must be possibly generated by numbers, so we can use the seed or size parameters from the state.
 */
import * as lcg from "@no-day/fp-ts-lcg";
import { readonlyNonEmptyArray as NEA, state as S } from "fp-ts";
import { Endomorphism, Predicate, Refinement } from "fp-ts/lib/function";
export declare const URI = "Gen";
export declare type URI = typeof URI;
export interface GenState {
    seed: lcg.Seed;
    size: number;
}
export interface Gen<A> extends S.State<GenState, A> {
}
declare module "fp-ts" {
    interface URItoKind<A> {
        readonly [URI]: Gen<A>;
    }
}
/**
 * @summary
 * State's `get` constructor but with `GenState` type applied.
 */
export declare const stated: S.State<GenState, GenState>;
export declare function repeatable<A, B>(kleisli: (a: A) => Gen<B>): Gen<(a: A) => B>;
/**
 * @summary
 * Change the seed to a specific value, useful for shrinking and other
 * deterministic operations.
 *
 * @category Constructors
 */
export declare function variant(seed: number): Gen<void>;
/**
 * @summary
 * Get the size of the current generator.
 */
export declare const sized: Gen<number>;
export declare const seeded: Gen<number>;
/**
 * @summary
 * Select a randomly uniform integer betwee `min` and `max`. Also takes a bounded instance.
 *
 * This were to be called "range", but range should be applied to the seed or size
 *
 * @todo **note**: Normalize the value to a 32 bit integer.
 */
export declare function chooseInt(min: number, max: number): Gen<number>;
/**
 * @summary
 * From a `ReadonlyNonEmptyArray` of `Gen<A>`'s, randomly pick a generator.
 *
 * @category Combinators
 */
export declare function oneOf<A>(gens: NEA.ReadonlyNonEmptyArray<Gen<A>>): Gen<A>;
/**
 * @summary
 *
 * **Please note** that this may loop forever if the predicate never returns true.
 *
 * @todo Implement as stack safe.
 */
export declare function suchThat<A, B extends A>(predicate: Predicate<A> | Refinement<A, B>): Endomorphism<Gen<B>>;
export declare const next: Gen<void>;
export declare const uniform: Gen<number>;
/**
 * @summary
 * Modifies the seed using an LCG perturber
 */
export declare function perturb(perturber: number): Gen<void>;
